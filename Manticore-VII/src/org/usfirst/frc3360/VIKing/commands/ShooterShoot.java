// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3360.VIKing.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.tables.TableKeyNotDefinedException;

import javax.swing.text.Position;

import org.usfirst.frc3360.VIKing.Robot;

/**
 *
 */
public class ShooterShoot extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    long startTimeMs;
    boolean autonomous;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public ShooterShoot(boolean auto) {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.superPunch);
    	autonomous = auto;
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	startTimeMs = System.currentTimeMillis();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	Robot.superPunch.shoot(autonomous);
    	System.out.println("exe shoot");
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (Robot.superPunch.isLoaded() && 
        	   !Robot.oi.getCoPilotJoystick().getRawButton(12) && 
        		!Robot.oi.getJoystickRight().getRawButton(1) && 
        		startTimeMs + 500 < System.currentTimeMillis());
    }

    // Called once after isFinished returns true
    protected void end() {
    	exit();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	exit();
    }
    
    private void exit(){
    	System.out.println("Exit shoot");
    	Robot.superPunch.shooterSet(0);
    }
}
