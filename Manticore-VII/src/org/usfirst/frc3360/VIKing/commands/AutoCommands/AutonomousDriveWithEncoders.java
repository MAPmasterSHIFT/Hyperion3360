// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3360.VIKing.commands.AutoCommands;

import edu.wpi.first.wpilibj.command.Command;
import org.usfirst.frc3360.VIKing.Robot;
import org.usfirst.frc3360.VIKing.subsystems.TankDrive;

/**
 *
 */
public class AutonomousDriveWithEncoders extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	double distanceR;
	double distanceL;
	boolean isCorrecting;
	long startTimeMs;
	long lastTimeError;
	double lastTimeDistance;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public AutonomousDriveWithEncoders(double rVal, double lVal, boolean correct) {
    	distanceR =rVal;
    	distanceL = lVal;
    	isCorrecting = correct;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    	requires(Robot.tankDrive);
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	startTimeMs = System.currentTimeMillis();
    	lastTimeError = startTimeMs;
    	Robot.tankDrive.setControlMode(3);
    	Robot.tankDrive.resetEncoderDistance();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	if(isCorrecting){
    		Robot.tankDrive.driveWithEncoders(distanceR, distanceL);
    		if(System.currentTimeMillis() - lastTimeError > 250)
    		{
    			double error;
    			lastTimeError = System.currentTimeMillis();
    			
    			error = Math.sin(Robot.tankDrive.getOffsetDeg())* Robot.tankDrive.l3Motor.getEncPosition()-lastTimeDistance;
    			Robot.HorizontalOffset += error;
    			lastTimeDistance = Robot.tankDrive.l3Motor.getEncPosition();
    		}
    	}else{
    		//Robot.tankDrive.driveWithEncoders(distanceR + Robot.HorizontalOffset,
    										  //distanceL + Robot.HorizontalOffset);
    	}
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return (Robot.tankDrive.isAtSetPoint() && 
        		System.currentTimeMillis() - startTimeMs > 200);
    }

    // Called once after isFinished returns true
    protected void end() {
    	exit();
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    	exit();
    }
    private void exit(){
    	System.out.println("Exit auto drive");
    	//Robot.tankDrive.resetEncoderDistance();
    }
}
