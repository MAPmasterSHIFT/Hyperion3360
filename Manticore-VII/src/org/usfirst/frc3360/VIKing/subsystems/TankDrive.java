// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3360.VIKing.subsystems;

import org.usfirst.frc3360.VIKing.Robot;
import org.usfirst.frc3360.VIKing.RobotMap;
import org.usfirst.frc3360.VIKing.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.ADXRS450_Gyro;


/**
 *
 */
public class TankDrive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public final CANTalon r1Motor = RobotMap.tankDriveR1Motor;
    public final CANTalon r2Motor = RobotMap.tankDriveR2Motor;
    public final CANTalon r3Motor = RobotMap.tankDriveR3Motor;
    public final CANTalon r4Motor = RobotMap.tankDriveR4Motor;
    public final CANTalon l1Motor = RobotMap.tankDriveL1Motor;
    public final CANTalon l2Motor = RobotMap.tankDriveL2Motor;
    public final CANTalon l3Motor = RobotMap.tankDriveL3Motor;
    public final CANTalon l4Motor = RobotMap.tankDriveL4Motor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public final ADXRS450_Gyro gyro = new ADXRS450_Gyro();
    
 
    //Before modif
    /*
    private final double positionP = 3.5;
    private final double positionI = 0.0001;
    private final double positionD = 1;
    private final double positionF = 0;*/
    
    
    //New Values
    private final double positionP = 1;
    private final double positionI = 0.0001;
    private final double positionD = 1;
    private final double positionF = 0;
    
    
    private final double moveP = 0.2;
    private final double moveI = 0;
    private final double moveD = 3;
    private final double moveF = 0;
    
    
    private final double vBusP = 0.01;
    private final double vBusI = 25;
    private final double vBusD = 0;
    private final double vBusF = 1;

    private double gyroInitVal;

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public TankDrive(){
    	gyro.calibrate();
    	gyroInitVal =  gyro.getAngle();
    }
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
         setDefaultCommand(new TankDriveJoystickDrive());
    }
    
    public void tankDriveWithJoysticks(){
    	 double joyRightVal = -Robot.oi.getJoystickRight().getRawAxis(1);
    	 double joyLeftVal = -Robot.oi.getJoystickLeft().getRawAxis(1);
    	 double rightOutput = 0;
    	 double leftOutput = 0;
     	
    	 if(joyRightVal > -0.1 && joyRightVal < 0.1){
    		 joyRightVal = 0;
    	 }
    	 if(joyLeftVal > -0.1 && joyLeftVal < 0.1){
    		 joyLeftVal = 0;
    	 }
    	 
    	// if(Robot.oi.getJoystickRight().getRawButton(1)){
    	//	 rightOutput = joyRightVal - (Robot.oi.getJoystickRight().getRawAxis(0)/2);
    	//	 leftOutput = joyRightVal + (Robot.oi.getJoystickRight().getRawAxis(0)/2);
    	// }
    	// else{
    		 leftOutput = Math.pow(joyRightVal, 2);
    		 if(joyRightVal<0){leftOutput = -leftOutput;}
    		 rightOutput = Math.pow(joyLeftVal, 2);
    		 if(joyLeftVal<0){rightOutput = -rightOutput;}
    	// }
    //	 rightOutput = joyRightVal - (Robot.oi.getJoystickRight().getRawAxis(0)/2);
		// leftOutput = joyRightVal + (Robot.oi.getJoystickRight().getRawAxis(0)/2);
    	 
    	 r1Motor.set(rightOutput);
    	 r2Motor.set(rightOutput);
    	 r3Motor.set(rightOutput);
    	 r4Motor.set(rightOutput);
    	 l1Motor.set(leftOutput);
    	 l2Motor.set(leftOutput);
    	 l3Motor.set(leftOutput);
    	 l4Motor.set(leftOutput);
    	 
    }
    public void setDriveValue(double dRightVal, double dLeftVal){
    	r1Motor.set(dRightVal);
   	 	r2Motor.set(dRightVal);
   	 	r3Motor.set(dRightVal);
   	 	r4Motor.set(dRightVal);
   	 	l1Motor.set(dLeftVal);
   	 	l2Motor.set(dLeftVal);
   	 	l3Motor.set(dLeftVal);
   	 	l4Motor.set(dLeftVal);
    }
    
    public void driveWithEncoders(double distanceR, double distanceL){
    	//System.out.println("positionLeft :  " + l3Motor.getEncPosition() + "   setPointLeft :  " + l3Motor.getSetpoint());
    	//System.out.println("positionRight :  " + r3Motor.getEncPosition() + "   setPointRight :  " + r3Motor.getSetpoint());
    	r3Motor.set(encodersToInches(distanceR));
    	l3Motor.set(encodersToInches(distanceL));
    }
    
    public void setControlMode(int mode)
    {
    	if(mode == 1)
    	{
    		//AUTO rotate PROFILE
    		l3Motor.changeControlMode(TalonControlMode.Position);
    		l3Motor.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
            l3Motor.setPID(positionP, positionI, positionD, positionF, 4096, 0.05, 0);

            l3Motor.enableControl();
            l3Motor.reverseSensor(false);
            l3Motor.configPeakOutputVoltage(8, -8);
            
            r3Motor.changeControlMode(TalonControlMode.Position);
            r3Motor.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
            r3Motor.setPID(positionP, positionI, positionD, positionF, 4096, 0.05, 0);

            r3Motor.enableControl();
            r3Motor.reverseSensor(true);
            r3Motor.configPeakOutputVoltage(8, -8);
            
            l1Motor.changeControlMode(TalonControlMode.Follower);
            l2Motor.changeControlMode(TalonControlMode.Follower);
            l4Motor.changeControlMode(TalonControlMode.Follower);
            
            r1Motor.changeControlMode(TalonControlMode.Follower);
            r2Motor.changeControlMode(TalonControlMode.Follower);
            r4Motor.changeControlMode(TalonControlMode.Follower);

            l1Motor.set(l3Motor.getDeviceID());
            l2Motor.set(l3Motor.getDeviceID());
            l4Motor.set(l3Motor.getDeviceID());
            
            r1Motor.set(r3Motor.getDeviceID());
            r2Motor.set(r3Motor.getDeviceID());
            r4Motor.set(r3Motor.getDeviceID());
            
            r3Motor.setProfile(0);
            l3Motor.setProfile(0);
    	}
    	else if (mode == 2)
    	{
    		//TELEOP PROFILE
    		
    		l1Motor.changeControlMode(TalonControlMode.PercentVbus);
    		l1Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		l2Motor.changeControlMode(TalonControlMode.PercentVbus);
    		l2Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		l3Motor.changeControlMode(TalonControlMode.PercentVbus);
    		l3Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		l4Motor.changeControlMode(TalonControlMode.PercentVbus);
    		l4Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		r1Motor.changeControlMode(TalonControlMode.PercentVbus);
    		r1Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		r2Motor.changeControlMode(TalonControlMode.PercentVbus);
    		r2Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		r3Motor.changeControlMode(TalonControlMode.PercentVbus);
    		r3Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		r4Motor.changeControlMode(TalonControlMode.PercentVbus);
    		r4Motor.setPID(vBusP, vBusI, vBusD, vBusF, 0, 1, 1);
    		
    		r3Motor.setProfile(1);
    		l3Motor.setProfile(1);
    	}
    	else if (mode == 3){
    		//AUTO move PROFILE
    		l3Motor.changeControlMode(TalonControlMode.Position);
    		l3Motor.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
            l3Motor.setPID(moveP, moveI, moveD, moveF, 4096, 0.05, 0);

            l3Motor.enableControl();
            l3Motor.reverseSensor(false);
            l3Motor.configPeakOutputVoltage(10, -10);
            
            r3Motor.changeControlMode(TalonControlMode.Position);
            r3Motor.setFeedbackDevice(CANTalon.FeedbackDevice.CtreMagEncoder_Relative);
            r3Motor.setPID(moveP, moveI, moveD, moveF, 4096, 0.05, 0);

            r3Motor.enableControl();
            r3Motor.reverseSensor(true);
            r3Motor.configPeakOutputVoltage(10, -10);
            
            l1Motor.changeControlMode(TalonControlMode.Follower);
            l2Motor.changeControlMode(TalonControlMode.Follower);
            l4Motor.changeControlMode(TalonControlMode.Follower);
            
            r1Motor.changeControlMode(TalonControlMode.Follower);
            r2Motor.changeControlMode(TalonControlMode.Follower);
            r4Motor.changeControlMode(TalonControlMode.Follower);

            l1Motor.set(l3Motor.getDeviceID());
            l2Motor.set(l3Motor.getDeviceID());
            l4Motor.set(l3Motor.getDeviceID());
            
            r1Motor.set(r3Motor.getDeviceID());
            r2Motor.set(r3Motor.getDeviceID());
            r4Motor.set(r3Motor.getDeviceID());
            
            r3Motor.setProfile(0);
            l3Motor.setProfile(0);
    	}
    }
    /*** RESET ENCODER ***/
    public void resetEncoderDistance()
    {
    	System.out.println("Resetting encoders");
    	r3Motor.setPosition(0);
    	l3Motor.setPosition(0);
    	
    	driveWithEncoders(0, 0);
    }
    
    /*** DISTANCE GETTER ***/
    //returns true when it<s done driving
    public boolean isAtSetPoint(){
    	return l3Motor.getEncVelocity() < 10 && l3Motor.getEncVelocity() > -10 && 
    			r3Motor.getEncVelocity() < 10 && r3Motor.getEncVelocity() > -10;
    }
    
    //Converts requested drive values to Encoder values
    public double encodersToInches(double val){
    	return val /16.0865;
    }
    
    //Converts a requested turn angle to drive values
    public double turnDegrees(double val){
    	//0.275 = val toronto
    return val * 0.2225;
    }
    
    public double getOffsetDeg(){
    	System.out.println("Gyro Offset : " + (gyro.getAngle() - gyroInitVal));
    	return gyro.getAngle() - gyroInitVal;
    }
    
}

