// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3360.VIKing.subsystems;

import org.usfirst.frc3360.VIKing.RobotMap;
import org.usfirst.frc3360.VIKing.commands.*;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Intake extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon intakeMotor = RobotMap.intakeIntakeMotor;
    
    private final DigitalInput switch1 = new DigitalInput(1);
    private final DigitalInput switch2 = new DigitalInput(2);
    private final double dGrabSpeed = -1;
    private final double dReleaseSpeed = 1;
    private final double dPrepareSpeed = -0.5;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public void grabBoulder(){
    	setIntakeMotor(dGrabSpeed);
    }
    
    public void realeaseBoulder(){
    	setIntakeMotor(dReleaseSpeed);
    }
    
    public void prepareForShooting(){
    	setIntakeMotor(dPrepareSpeed);
    }
    
    public void intakeIdle(){
    	setIntakeMotor(0);
    }
    
    private void setIntakeMotor(double dIntakeSpeed){
    	intakeMotor.set(dIntakeSpeed);
    	SmartDashboard.putBoolean("intake", (switch1.get() &&  switch2.get()));
    }
   
}

