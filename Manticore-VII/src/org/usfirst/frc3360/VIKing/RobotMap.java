// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3360.VIKing;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Relay;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static CANTalon tankDriveR1Motor;
    public static CANTalon tankDriveR2Motor;
    public static CANTalon tankDriveR3Motor;
    public static CANTalon tankDriveR4Motor;
    public static CANTalon tankDriveL1Motor;
    public static CANTalon tankDriveL2Motor;
    public static CANTalon tankDriveL3Motor;
    public static CANTalon tankDriveL4Motor;
    public static CANTalon intakeIntakeMotor;
    public static CANTalon winchWinchMotor;
    public static CANTalon winchSecondWinchMotor;
    public static CANTalon killerWedgeAngleRMotor;
    public static CANTalon killerWedgeAngleLMotor;
    public static CANTalon superPunchReloaderMotor;
    
    public static Relay aimLightRelay;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        tankDriveR1Motor = new CANTalon(0);
        LiveWindow.addActuator("TankDrive", "R1Motor", tankDriveR1Motor);
        tankDriveR1Motor.setInverted(false);
        
        tankDriveR2Motor = new CANTalon(1);
        LiveWindow.addActuator("TankDrive", "R2Motor", tankDriveR2Motor);
        tankDriveR2Motor.setInverted(false);
        
        tankDriveR3Motor = new CANTalon(2);
        LiveWindow.addActuator("TankDrive", "R3Motor", tankDriveR3Motor);
        tankDriveR3Motor.setInverted(false);
        
        tankDriveR4Motor = new CANTalon(3);
        LiveWindow.addActuator("TankDrive", "R4Motor", tankDriveR4Motor);
        tankDriveR4Motor.setInverted(false);
        
        tankDriveL1Motor = new CANTalon(4);
        LiveWindow.addActuator("TankDrive", "L1Motor", tankDriveL1Motor);
        tankDriveL1Motor.setInverted(false);
        
        tankDriveL2Motor = new CANTalon(5);
        LiveWindow.addActuator("TankDrive", "L2Motor", tankDriveL2Motor);
        tankDriveL2Motor.setInverted(false);
        
        tankDriveL3Motor = new CANTalon(6);
        LiveWindow.addActuator("TankDrive", "L3Motor", tankDriveL3Motor);
        tankDriveL3Motor.setInverted(false);
        
        tankDriveL4Motor = new CANTalon(7);
        LiveWindow.addActuator("TankDrive", "L4Motor", tankDriveL4Motor);
        tankDriveL4Motor.setInverted(false);
        
        killerWedgeAngleRMotor = new CANTalon(21);
        LiveWindow.addActuator("KillerWedge", "AngleRMotor", killerWedgeAngleRMotor);
        killerWedgeAngleRMotor.setInverted(false);
        
        killerWedgeAngleLMotor = new CANTalon(20);
        LiveWindow.addActuator("KillerWedge", "AngleLMotor", killerWedgeAngleLMotor);
        killerWedgeAngleLMotor.setInverted(false);
        
        superPunchReloaderMotor = new CANTalon(12);
        LiveWindow.addActuator("SuperPunch", "ReloaderMotor", superPunchReloaderMotor);
        superPunchReloaderMotor.setInverted(false);
        
        winchWinchMotor = new CANTalon(11);
        LiveWindow.addActuator("Winch", "WinchMotor", winchWinchMotor);
        winchWinchMotor.setInverted(false);
        
        winchSecondWinchMotor = new CANTalon(14);
        LiveWindow.addActuator("Winch", "WinchSecondMotor", winchSecondWinchMotor);
        winchSecondWinchMotor.setInverted(false);
        
        intakeIntakeMotor = new CANTalon(10);
        LiveWindow.addActuator("Intake", "IntakeMotor", intakeIntakeMotor);
        intakeIntakeMotor.setInverted(false);
        
        
        aimLightRelay = new Relay(0);
        LiveWindow.addActuator("Aim", "AimLight", aimLightRelay);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
